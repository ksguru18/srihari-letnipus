                        ---------------------------
                        Mt Wilson Integration Guide
                        ---------------------------
                        ---------------------------
                        2012-09-21
                        ---------------------------


Dependency Conflicts

    If there are dependency clashes between artifacts already in your project and
the Mt Wilson Java API, some options might be: 

    1. Instead of the single-jar package, use the multi-jar package for the Java API and remove the duplicate dependencies.

    2. Use OSGi which will allow the Mt Wilson Java API to use its own set of dependencies separate from the rest of your project.

    Since RC2 the Java API has shipped in a single-jar format that has private dependencies which should not clash with other artifacts in your project.

+---
mtwilson.api.baseurl=https://192.168.1.100:8181
mtwilson.api.keystore=/etc/intel/cloudsecurity/apiclient.jks
mtwilson.api.keystore.password=changeit
mtwilson.api.key.alias=mykey1
mtwilson.api.key.password=changeit
+---

    1.	Create an RSA key pair with a 1024-bit key that is valid for 365 days
KeyPair keypair = RsaUtil.generateRsaKeyPair(1024);
X509Certificate certificate = RsaUtil.generateX509Certificate("CN=My Integration Project, O=My Company, L=My City, ST=CA, C=US", keypair, 365);

    2.	Save the new RSA key pair into a keystore
SimpleKeystore keystore = new SimpleKeystore(new File(config.getString("mtwilson.api.keystore")), config.getString("mtwilson.api.keystore.password"));
keystore.addKeyPairX509(keypair.getPrivate(), certificate, config.getString("mtwilson.api.key.alias"), config.getString("mtwilson.api.key.password")); 
keystore.save();
System.out.println("Created key pair with certificate fingerprint: "+DigestUtils.shaHex(certificate.getEncoded()));

    3.	Download the server’s SSL certificate, confirm its fingerprint, and it into the keystore
URL serverURL = new URL(config.getString("mtwilson.api.baseurl"));
X509Certificate[] serverCerts = RsaUtil.getServerCertificates(serverURL);
String aliasBasename = serverURL.getHost();
int certificateNumber = 0;
for(X509Certificate cert : serverCerts) {
  certificateNumber++;
  String alias = String.format("%s-%d", aliasBasename, certificateNumber);
  String fingerprint = DigestUtils.shaHex(cert.getEncoded());
  System.out.println("Storing certificate "+alias+" with fingerprint "+fingerprint);
  keystore.addTrustedSslCertificate(cert, alias);
}
keystore.save(); 

    4.	Register the public key with Mt Wilson and request access
RsaCredentialX509 rsaCredential = keystore.getRsaCredentialX509(config.getString("mtwilson.api.key.alias"), config.getString("mtwilson.api.key.password"));
ApiClient api = new ApiClient(serverURL, rsaCredential, keyStore);
ApiClientCreateRequest me = new ApiClientCreateRequest();
me.setCertificate(rsaCredential.getCertificate().getEncoded());
me.setRoles(new String[] { Role.Attestation.toString(), Role.Whitelist.toString() });
api.register(me); 

    5.	Download and save the server’s SAML signing certificate (so you can verify trust assertions later)
X509Certificate samlCertificate = api.getSamlCertificate();
keystore.addTrustedSamlCertificate(samlCertificate, baseURL.getHost());
keystore.save(); 

    After these steps, contact your security manager and he or she will grant or deny access with 
specific privileges. You may be asked to confirm your public key fingerprint (see step 2 above). 

    After your API client is approved, you can make API calls to Mt Wilson using the API Client Library:
//import com.intel.mtwilson.datatypes.OsData;
List<OsData> list = api.listAllOS();
system.out.println(String.format("Got list size %d", list.size()));                    

    If you have saved all the configuration settings into a file such as mtwilson.properties:
ApiClient api = new ApiClient(new File("/path/to/mtwilson.properties"));
List<OsData> list = api.listAllOS();
System.out.println(String.format("Got list size %d", list.size()));                    

    Summary of import statements:
import com.intel.mtwilson.crypto.RsaUtil;
import com.intel.mtwilson.crypto.SimpleKeystore;
import com.intel.mtwilson.ApiClient;
import com.intel.mtwilson.datatypes.ApiClientCreateRequest;
import com.intel.mtwilson.datatypes.Role;
import java.security.KeyPair;
import org.apache.commons.io.IOUtils;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;


    Notes:
Whenever the API requires transferring binary data in a request body or response body, 
that data is always base64-encoded without chunking when serializing to JSON or XML. 
When the API requires specifying a fingerprint in the query string, that fingerprint is always hex-encoded.

